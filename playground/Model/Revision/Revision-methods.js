/** * check entity for changes in the on save event ds.Revision.checkForRevision(this) */model.Revision.methods.checkEntity = function(theEntity) {	try {		if (!theEntity.isNew()) {			var theClass = theEntity.getDataClass(),				formerEntity = theClass(theEntity.getKey()),				changedFrom = '';						for (var attrName in theClass.attributes){				var classAtt = theClass[attrName];								if ((classAtt.kind == 'storage') & (classAtt.kind != 'image') & (theEntity[attrName] != formerEntity[attrName])) {					changedFrom += attrName + ' : ' + formerEntity[attrName] + '\r';				}			}			if (changedFrom.length > 0) {				new ds.Revision({					className: theClass.getName(),					entityKey: theEntity.getKey(),					changes: changedFrom				}).save();			}		}				return true;	} catch (e) {		return e;	}};/** * get collection revisions */ model.Revision.methods.getCollectionRevisions = function(theCollection) {	try {		if (theCollection.length === 0) {			return ds.Revision.createEntityCollection();		} else {			var className = theCollection.getDataClass().getName(),				entityKeyArray = theCollection.ID;						return ds.Revisions.query('className == :1 and entityKey in :2', className, entityKeyArray);		}	} catch (e) {		return e;	}};/** * get entity revisions */ model.Revision.methods.getEntityRevisions = function(theEntity) {	try {		var className = theEntity.getDataClass().getName(),			entityKey = theEntity.getKey();				return ds.Revision.query('className == :1 and entityKey == :2', className, entityKey)	} catch (e) {		return e;	}};